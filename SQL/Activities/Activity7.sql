-- =====================================
-- ACTIVITY 6 | ORDERS TABLE OPERATIONS
-- =====================================

-- üß± STEP 1: Drop the table if it already exists (prevents ORA-00955)
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE ORDERS_ACTIVITY6';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

-- üß± STEP 2: Create the new table
CREATE TABLE ORDERS_ACTIVITY6 (
  ORDER_NO INT PRIMARY KEY,
  PURCHASE_AMOUNT FLOAT,
  ORDER_DATE DATE,
  CUSTOMER_ID INT,
  SALESMAN_ID INT
);

-- ü™£ STEP 3: Insert the given data
INSERT ALL
  INTO ORDERS_ACTIVITY6 VALUES (70001, 150.5, TO_DATE('2012/10/05','YYYY/MM/DD'), 3005, 5002)
  INTO ORDERS_ACTIVITY6 VALUES (70009, 270.65, TO_DATE('2012/09/10','YYYY/MM/DD'), 3001, 5005)
  INTO ORDERS_ACTIVITY6 VALUES (70002, 65.26, TO_DATE('2012/10/05','YYYY/MM/DD'), 3002, 5001)
  INTO ORDERS_ACTIVITY6 VALUES (70004, 110.5, TO_DATE('2012/08/17','YYYY/MM/DD'), 3009, 5003)
  INTO ORDERS_ACTIVITY6 VALUES (70007, 948.5, TO_DATE('2012/09/10','YYYY/MM/DD'), 3005, 5002)
  INTO ORDERS_ACTIVITY6 VALUES (70005, 2400.6, TO_DATE('2012/07/27','YYYY/MM/DD'), 3007, 5001)
  INTO ORDERS_ACTIVITY6 VALUES (70008, 5760, TO_DATE('2012/08/15','YYYY/MM/DD'), 3002, 5001)
  INTO ORDERS_ACTIVITY6 VALUES (70010, 1983.43, TO_DATE('2012/10/10','YYYY/MM/DD'), 3004, 5006)
  INTO ORDERS_ACTIVITY6 VALUES (70003, 2480.4, TO_DATE('2012/10/10','YYYY/MM/DD'), 3009, 5003)
  INTO ORDERS_ACTIVITY6 VALUES (70012, 250.45, TO_DATE('2012/06/27','YYYY/MM/DD'), 3008, 5002)
  INTO ORDERS_ACTIVITY6 VALUES (70011, 75.29, TO_DATE('2012/08/17','YYYY/MM/DD'), 3003, 5007)
  INTO ORDERS_ACTIVITY6 VALUES (70013, 3045.6, TO_DATE('2012/04/25','YYYY/MM/DD'), 3002, 5001)
SELECT 1 FROM DUAL;

COMMIT;

-- =====================================
-- ACTIVITY 6 | SORTING & FILTERING DATA
-- =====================================

-- 1Ô∏è‚É£ All salesman IDs (no duplicates)
SELECT DISTINCT SALESMAN_ID 
FROM ORDERS_ACTIVITY6;

-- 2Ô∏è‚É£ Order numbers ordered by date (ascending)
SELECT ORDER_NO, ORDER_DATE 
FROM ORDERS_ACTIVITY6 
ORDER BY ORDER_DATE ASC;

-- 3Ô∏è‚É£ Order numbers ordered by purchase amount (descending)
SELECT ORDER_NO, PURCHASE_AMOUNT 
FROM ORDERS_ACTIVITY6 
ORDER BY PURCHASE_AMOUNT DESC;

-- 4Ô∏è‚É£ Orders with purchase amount less than 500
SELECT * 
FROM ORDERS_ACTIVITY6 
WHERE PURCHASE_AMOUNT < 500;

-- 5Ô∏è‚É£ Orders with purchase amount between 1000 and 2000
SELECT * 
FROM ORDERS_ACTIVITY6 
WHERE PURCHASE_AMOUNT BETWEEN 1000 AND 2000;

-- =====================================
-- ACTIVITY 7 | AGGREGATE FUNCTIONS
-- =====================================

-- üßÆ 1. Total purchase amount of all orders
SELECT SUM(PURCHASE_AMOUNT) AS "Total sum" 
FROM ORDERS_ACTIVITY6;

-- üßÆ 2. Average purchase amount of all orders
SELECT AVG(PURCHASE_AMOUNT) AS "Average" 
FROM ORDERS_ACTIVITY6;

-- üßÆ 3. Maximum purchase amount
SELECT MAX(PURCHASE_AMOUNT) AS "Maximum" 
FROM ORDERS_ACTIVITY6;

-- üßÆ 4. Minimum purchase amount
SELECT MIN(PURCHASE_AMOUNT) AS "Minimum" 
FROM ORDERS_ACTIVITY6;

-- üßÆ 5. Number of salesmen (distinct)
SELECT COUNT(DISTINCT SALESMAN_ID) AS "Total count" 
FROM ORDERS_ACTIVITY6;

--  Optional: Show all 5 aggregates in one single result row
SELECT
  SUM(PURCHASE_AMOUNT) AS "Total sum",
  AVG(PURCHASE_AMOUNT) AS "Average",
  MAX(PURCHASE_AMOUNT) AS "Maximum",
  MIN(PURCHASE_AMOUNT) AS "Minimum",
  COUNT(DISTINCT SALESMAN_ID) AS "Total count"
FROM ORDERS_ACTIVITY6;

